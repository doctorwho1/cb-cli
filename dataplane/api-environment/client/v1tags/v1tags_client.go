// Code generated by go-swagger; DO NOT EDIT.

package v1tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1tags API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1tags API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ListTagsV1 lists proxy configurations

Cloudbreak allows you to save your existing proxy configuration information as an external source so that you can provide the proxy information to multiple clusters that you create with Cloudbreak
*/
func (a *Client) ListTagsV1(params *ListTagsV1Params) (*ListTagsV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTagsV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listTagsV1",
		Method:             "GET",
		PathPattern:        "/v1/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTagsV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListTagsV1OK), nil

}

/*
PutTagsV1 lists proxy configurations

Cloudbreak allows you to save your existing proxy configuration information as an external source so that you can provide the proxy information to multiple clusters that you create with Cloudbreak
*/
func (a *Client) PutTagsV1(params *PutTagsV1Params) (*PutTagsV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTagsV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putTagsV1",
		Method:             "PUT",
		PathPattern:        "/v1/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutTagsV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTagsV1OK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
